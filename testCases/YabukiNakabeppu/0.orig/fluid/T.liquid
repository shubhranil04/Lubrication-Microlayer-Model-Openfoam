/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  plus                                  |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      T;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 1 0 0 0];

#include "../../constant/runParams"


internalField  #codeStream  /* Use of codeStream to initialize T field */
{
  codeInclude  /* Headers for compilation */
  #{
  #include "fvCFD.H"
  #};

  codeOptions /* Compilation options */
  #{
    -I$(FOAM_SRC)/finiteVolume/lnInclude \
    -I$(FOAM_SRC)/meshTools/lnInclude 
  #};

  codeLibs  /* Libraries for compilation */
  #{
    -lmeshTools \
    -lfiniteVolume
  #};

  code  /* User code */
  #{
    /* Access to internal mesh information */
    const IOdictionary& d = static_cast<const IOdictionary&>(dict);
    const fvMesh& mesh = refCast<const fvMesh>(d.db());
    
    const Foam::Time& runTime = static_cast<const Foam::objectRegistry&>(d.db()).time();

    scalarField T(mesh.nCells(), 0.); /* initialization */
	
    IOdictionary runParams
    (
        IOobject
        (
            "runParams",
            runTime.constant(),
            mesh,
            IOobject::MUST_READ,
            IOobject::NO_WRITE
        )
    );
    
    /* User variables initialization */
 
    const scalar Tact = readScalar(runParams.lookup("Tact"));
    const scalar Tbulk = readScalar(runParams.lookup("Tbulk"));
    const scalar blThickness = readScalar(runParams.lookup("blThickness"));	
    
    
    forAll(T, i) /* Loop on elements */
    {
      const scalar y = mesh.C()[i][1]; /* Access to y component of cell centers coordinates */
      
      if (y < blThickness)
      {
      	T[i] = Tact - y/blThickness*(Tact - Tbulk);
      }
      
      else
      {
      	T[i] = Tbulk;
      }	
    }

    T.writeEntry("", os); /* Write output in the dictionary */

  #};
};

boundaryField
{
    right
    {
        type 		fixedValue;
        value 		uniform $Tbulk;
    }

    top
    {
        type 		fixedValue;
        value 		uniform $Tbulk;
    }

    fluid_to_solid
    {
        type            compressible::turbulentTemperatureRadCoupledMixed;
    	value           uniform $Tbulk;
        Tnbr            T;
        kappaMethod     fluidThermo;
        kappaName       none;
    }
    
    axis
    {
    	type            empty;
    }
    
    front
    {
        type            wedge;
    }
    
    back
    {
        type            wedge;
    }
}

// ************************************************************************* //

